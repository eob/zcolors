#!/bin/zsh
emulate -L zsh; setopt extendedglob rcquotes warncreateglobal

command -v less > /dev/null && (( ${${=$( less -V )}[2]} >= 581 )) &&
    print -r - 'export -TU LESS="$LESS --use-color -DSkY" less \ '

if [[ ! -v color ]]; then
  autoload -Uz colors
  colors
fi
() {
  local -i i num
  local name code
  for (( i = 0; i < 8; i++ )); do
    name=$color[$(( i + 30 ))]
    for num name in $i "$name" $(( i + 8 )) "bright$name"; do
      for code name in "38;5;$num" "$name" "48;5;$num" "bg-$name"; do
        color[$code]="$name"
        color[$name]="$code"
      done
    done
  done
  color[03]=italic
  color[italic]=03
}
print -r - "typeset -gA color=( ${(kv@q+)color:#} )"

local -TU LS_COLORS="$1" ls_colors

local -A ls_defaults=(
  'no' "$color[none]"
  'fi' "$color[white]"
  'mi' "$color[brightblack]"
  'or' "$color[red];$color[italic]"
  'ex' "$color[brightgreen]"
  'sg' "$color[brightyellow]"
  'su' "$color[brightred]"
  'st' "$color[blue]"
  'di' "$color[brightblue]"
  'tw' "$color[blue];$color[underline]"
  'ow' "$color[brightblue];$color[underline]"
  'ln' "$color[brightcyan]"
  'so' "$color[brightmagenta]"
  'pi' "$color[yellow]"
  'cd' "$color[yellow];$color[bold]"
  'bd' "$color[yellow];$color[italic]"
  '*.DS_Store' "$color[faint]"
  '*.zwc' "$color[faint]"
)
() {
  local k v; for k v in ${(kv@)ls_defaults}; do
    [[ -z $ls_colors[(r)$k=*] ]] &&
        ls_colors+=( "$k=$v" )
  done
}

print -r - "export -TU LS_COLORS=${(q+)LS_COLORS} ls_colors"
print -r - "
autoload -Uz add-zsh-hook
.zcolors.precmd() {
  zmodload -F zsh/parameter p:saliases
  ls_colors+=( '*.'\${(@k)^saliases}'=$ls_defaults[sg]' )
}
add-zsh-hook precmd .zcolors.precmd
"

local -A syntax_colors=(
  default       'no'
  comment       'mi'
  unknown-token 'or'

  arg0                    'ex'
  builtins                'ex'
  suffix-alias            'sg'
  single-hyphen-option    'sg'
  double-hyphen-option    'sg'
  single-quoted-argument  'sg'
  double-quoted-argument  'sg'
  dollar-quoted-argument  'sg'
  precommand              'su'
  reserved-word           'su'

  globbing                  'tw'
  path_prefix               'di'
  path_prefix_pathseparator 'st'
  path                      'ow'
  path_pathseparator        'tw'
  autodirectory             'ow'

  global-alias                  'ln'
  rc-quote                      'ln'
  dollar-double-quoted-argument 'ln'
  assign                        'ln'
  back-double-quoted-argument   'ln'
  back-dollar-quoted-argument   'ln'
  history-expansion             'ln'

  back-quoted-argument-delimiter  'so'
  command-substitution-delimiter  'so'
  process-substitution-delimiter  'so'

  back-quoted-argument  'no'
  command-substitution  'no'
  process-substitution  'no'

  redirection       'pi'
  commandseparator  'pi'
  numeric-fd        'cd'
  named-fd          'bd'

  bracket-error   'or'
  bracket-level-1 'so'
  bracket-level-2 'so'
  bracket-level-3 'so'
  bracket-level-4 'so'
  bracket-level-5 'so'
)
local -A ZSH_HIGHLIGHT_STYLES=()

.lscolor() {
  local col=${ls_colors[(r)$1=*]#$1=}
  [[ $col == target ]] &&
      col=$ls_defaults[ln]
  print -r -- "$col"
}

() {
  local -aU spec
  local -i num
  local syn col em bg fg tmp
  for syn col in "${(kv@)syntax_colors}"; do
    [[ $col == target ]] &&
        col=$ls_defaults[ln]
    spec=() em=0 col="$(.lscolor $col)" fg='' bg='' tmp=''
    for num in ${(s.;.)col}; do
      case $tmp$num in
        ( 0 )
          spec+=( none )
        ;;
        ( 1 )
          spec+=( bold )
        ;;
        ( 4 )
          spec+=( underline )
        ;;
        ( 3 | 7 )
          spec+=( standout )
        ;;
        ( 39 )
          fg=default
        ;;
        ( 49 )
          bg=default
        ;;
        ( <30-37> )
          fg=$(( num - 30 ))
        ;;
        ( <40-47> )
          bg=$(( num - 40 ))
        ;;
        ( <90-97> )
          fg=$(( num - 90 + 8 ))
        ;;
        ( <100-107> )
          bg=$(( num - 100 + 8 ))
        ;;
        ( (3|4)8(|\;5) )
          tmp+="$num;"
        ;;
        ( 38\;5\;<-> )
          fg=$num
        ;|
        ( 48\;5\;<-> )
          bg=$num
        ;|
        ( (3|4)8\;5\;<-> )
          tmp=
        ;;
      esac
    done
    spec+=( ${fg:+fg=$fg} ${bg:+bg=$bg} )
    ZSH_HIGHLIGHT_STYLES[$syn]="${(j:,:)spec}"
  done
}
ZSH_HIGHLIGHT_STYLES[cursor-matchingbracket]=fg=0,bg=11
print -r - "typeset -gA ZSH_HIGHLIGHT_STYLES=( ${(kv@q+)ZSH_HIGHLIGHT_STYLES} )"

local -T ZLS_COLORS zls_colors=(
  "(events)=[[:space:]]#(|-)<->(#b)(*)=$(.lscolor no)=$color[faint]"
  "(history-lines)=(#b)([[:space:]]#<->)*=$(.lscolor no)=$color[faint]"
)
local -A comp_colors=(
  'file-descriptors'  "$syntax_colors[numeric-fd]"

  '(aliases|builtins|executables|functions|commands)' 'ex'
  'suffix-aliases'  'sg'
  'options'         'sg'
  'reserved-words'  'su'

  'glob(flags|quals)' 'di'

  '(global-aliases|modifiers|parameters)' 'ln'

  '*local*~*director*'        'ln'
  '*(branch|head)*~*remote*'  'ln'
  '*remote*~*(branch|head)*'  'so'
  '*commit*~*-tag'            'pi'
  '*-tag*~*commit*'           'cd'
)
() {
  local comp col
  for comp col in ${(kv@)comp_colors}; do
    zls_colors+=(
        "($comp)=(#b)(*[^ ]~*  *|)[ ]#(*)=$color[none]=$( .lscolor $col )=$color[faint]"
    )
  done
}
zls_colors+=(
  "(*~*(directories|files|expansions))=(*[^ ]~*  *|)[ ]#(#b)(*)=$color[none]=$color[faint]"
  "$ls_colors[@]"
  "tc=$(.lscolor no)"
  "sp=$(.lscolor fi)"
  "sa=$(.lscolor ex)"
  "ma=$color[brightwhite];$color[bg-blue]"
)

print-style() {
  zstyle "$@"
  [[ $1 == -e ]] &&
      shift
  zstyle -L $1 $2
}
print -r - "typeset -gTU ZLS_COLORS=${(q+)ZLS_COLORS} zls_colors"
print-style -e ':completion:*:default' list-colors 'reply=( $zls_colors[@] )'
print-style ':completion:*' group-name ''
print-style ':completion:*' list-separator ' '
unfunction print-style

local -A git_colors=(
  branch.current        "$(.lscolor ln);$color[reverse]"
  branch.local          "$(.lscolor ln)"
  branch.plain          "$(.lscolor ln)"
  branch.remote         "$(.lscolor so)"
  branch.upstream       "$(.lscolor so)"

  decorate.HEAD         "$(.lscolor ln);$color[italic]"
  decorate.branch       "$(.lscolor ln)"
  decorate.remotebranch "$(.lscolor so)"
  decorate.tag          "$(.lscolor pi)"
  decorate.grafted      "$(.lscolor or)"
  decorate.stash        "$(.lscolor mi)"

  diff.commit      "$(.lscolor pi)"
  diff.meta        "$(.lscolor pi)"
  diff.frag        "$(.lscolor pi);$color[underline]"
  diff.func        "$(.lscolor no)"
  diff.context     "$(.lscolor no)"
  diff.contextBold "$(.lscolor no);$color[bold]"
  diff.new         "$color[brightgreen]"
  diff.newDimmed   "$color[green]"
  diff.newBold     "$color[brightgreen];$color[bold]"
  diff.old         "$color[brightred];$color[faint]"
  diff.oldDimmed   "$color[red];$color[faint]"
  diff.oldBold     "$color[brightred];$color[faint];$color[bold]"
  diff.newMoved       "$color[brightcyan]"
  diff.newMovedDimmed "$color[cyan]"
  diff.newMovedAlternative       "$color[brightblue]"
  diff.newMovedAlternativeDimmed "$color[blue]"
  diff.oldMoved       "$color[brightcyan];$color[faint]"
  diff.oldMovedDimmed "$color[cyan];$color[faint]"
  diff.oldMovedAlternative       "$color[brightblue];$color[faint]"
  diff.oldMovedAlternativeDimmed "$color[blue];$color[faint]"
  diff.whitespace  "$color[reverse]"

  # grep.column
  # grep.context
  # grep.filename
  # grep.function
  # grep.linenumber
  # grep.matchContext
  # grep.matchSelected
  # grep.selected
  # grep.separator

  interactive.header  "$(.lscolor mi);$color[bold]"
  interactive.prompt  "$color[bg-blue];$color[brightwhite]"
  interactive.help    "$(.lscolor mi)"
  interactive.error   "$(.lscolor or)"

  remote.error    "$color[red]"
  remote.warning  "$color[yellow]"
  remote.success  "$color[green]"
  remote.hint     "$color[faint]"

  status.header       "$(.lscolor no)"
  status.branch       "$(.lscolor ln)"
  status.localbranch  "$(.lscolor ln)"
  status.remotebranch "$(.lscolor so)"
  status.nobranch     "$(.lscolor or)"
  status.added        "$color[brightgreen]"
  status.updated      "$color[brightgreen]"
  status.changed      "$color[brightyellow]"
  status.unmerged     "$color[brightred]"
  status.untracked    "$color[faint]"
)
git config --global diff.colorMoved zebra

() {
  local -aU spec
  local -i num
  local slot col fg bg tmp
  for slot col in "${(kv@)git_colors}"; do
    [[ $col == target ]] &&
        col=$ls_defaults[ln]
    spec=() fg='' bg='' tmp=''
    for num in ${(s.;.)col}; do
      case $tmp$num in
        1 )
          spec+=( bold )
          ;;
        2 )
          spec+=( dim )
          ;;
        3 )
          spec+=( italic )
          ;;
        4 )
          spec+=( ul )
          ;;
        5 )
          spec+=( blink )
          ;;
        7 )
          spec+=( reverse )
          ;;
        9 )
          spec+=( strike )
          ;;
        <30-37> )
          fg=$(( num - 30 ))
          ;;
        <40-47> )
          bg=$(( num - 40 ))
          ;;
        <90-97> )
          fg=$(( num - 90 + 8 ))
          ;;
        <100-107> )
          bg=$(( num - 100 + 8 ))
          ;;
        (3|4)8(|\;5) )
          tmp+="$num;"
          ;;
        38\;5\;<-> )
          fg=$num
          ;|
        48\;5\;<0-15> )
          bg=$num
          ;|
        (3|4)8\;5\;<-> )
          tmp=
          ;;
      esac
    done
    spec=( "${fg:-normal}" "${bg:-normal}" $spec[@] )
    if (( $#spec[@] )); then
      git config --global "color.$slot" "$spec"
    else
      git config --global --unset "color.$slot"
    fi
  done
}

unfunction .lscolor
